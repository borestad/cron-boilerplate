#!/usr/bin/env bash
set -euo pipefail

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Preinstall
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
download() {
  local url="$1"
  local software=$(basename "$url")

  if ! command -v "$software" &>/dev/null; then
    echo "𐄂 $software is not installed, downloading ..."
  else
    printf "%-35s %s\n" "✔ $software is already preinstalled. " "[ $(command -v $software) ] - installing anyway"
  fi

  wget -O ~/.local/bin/$software -q -nv --content-disposition "$url"
  chmod +x ~/.local/bin/$software 2>/dev/null || true
}

preinstall-binaries() {
  cp .github/scripts/ciutil ~/.local/bin/

  for url in $(jq .preinstallBinaries package.json | jq -r .[]); do
    download "$url" &
  done

  wait

  install-nodemodules() {
    if jq -e .dependencies $GITROOT/package.json &>/dev/null; then
      cd $GITROOT

      # Applying dirty fix for *not* including @types/* in the production ci
      if [ -f pnpm-lock.yaml ]; then
        cp pnpm-lock.yaml $RUNNER_TEMPDIR/
        grep -v "'@types/" $RUNNER_TEMPDIR/pnpm-lock.yaml >|pnpm-lock.yaml
      fi

      pnpm install --frozen-lockfile --production --prefer-offline --no-verify-store-integrity

      mv $RUNNER_TEMPDIR/pnpm-lock.yaml .
    fi
  }

}

optimize-apt-get-install() {
  sudo cp -p /bin/true /usr/bin/mandb 2>/dev/null || true
  sudo mv -f /var/cache/man /tmp/ 2>/dev/null || true
}

git-commit-to-repository() {
  git config user.name github-actions
  git config user.email github-actions@github.com
  git pull --rebase --autostash
  git add . --verbose

  stats=$(git diff --cached --shortstat | sed -E 's/ (insertions?|deletions?|changed?,)//g')
  DATE=$(date '+%Y-%m-%d %H:%M:%S')

  git commit -m "🦄 \`$DATE\`  \`$stats\`" -a || true
  git push
}

function to_env() {
  mkdir -pv $2
  export $1=$2
  echo "$1=$2" >>$GITHUB_ENV
}

function add_path() {
  echo $1 >>$GITHUB_PATH
}
set-env-variables() {
  mkdir -pv ~/.local/bin

  # Action Cache
  WS=$RUNNER_WORKSPACE

  to_env ACTIONS_CACHE_DIR $WS/.actions-cache
  to_env ACTIONS_CACHE_BIN_DIR $WS/.actions-cache/bin
  to_env PNPM_STORE_DIR $WS/.actions-cache/pnpm/pnpm-store
  to_env EGET_BIN $WS/.actions-cache/bin
  to_env DENO_DIR $WS/.actions-cache/.deno
  to_env PNPM_HOME $WS/.actions-cache/pnpm

  # TTL Cache (Cache that will automatically be invalidated)
  to_env TTL_CACHE_DIR $WS/.cache-ttl
  to_env BKT_CACHE_DIR $WS/.cache-ttl/bkt

  # Other dirs
  to_env DEBUG_DIR $WS/.debug
  to_env RUNNER_TEMPDIR $RUNNER_TEMP/$(date +%s%N)

  # Other env
  to_env CACHE_PREFIX "$(date +'%U')"
  to_env NODE_ENV production
  to_env TERM xterm-256color
  to_env FORCE_COLOR 1

  # PATH
  add_path './node_modules/.bin'
  add_path $HOME/.local/bin
  add_path $WS/.actions-cache/pnpm
  add_path $WS/.actions-cache/bin
  add_path $GITHUB_WORKSPACE/.github/scripts
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Time / Benchmark
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
time-now() {
  date +%s.%N
}

benchmark() {
  local start=$1
  local end=${2:-$(time-now)}
  printf %.2f $(echo "$end - $start" | bc -l)
}

timestamp() {
  printf "\n%-65s %s\n" "⌛ Time: $(benchmark $start)s" "⌛ Total: $(benchmark $initstart)s"
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Debug / Statistics / Information
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
show-cache-structure() {
  ✨ "Cache structure ($ACTIONS_CACHE_DIR)"
  dust -b -P -s $ACTIONS_CACHE_DIR
  echo

  ✨ "Cache structure ($TTL_CACHE_DIR)"
  dust -b -P -s $TTL_CACHE_DIR
  echo
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Formatters / Printers
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
✨() {
  ___
  start=$(time-now)
  echo "✨ $1"
  echo
}

✓() { echo -e "✓ ${R} $1"; }

___() {
  printf "\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n"
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# File system
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
git-root() {
  git rev-parse --show-toplevel
}

mk() {
  mkdir -pv -p "$@" && cd "$_"
}

mkt() {
  cd $(mktemp -d) && pwd
}

has-file-changed() {
  changed_files="$(git diff-tree -r --name-only --no-commit-id ORIG_HEAD HEAD 2>/dev/null)"
  if $(echo "$changed_files" | grep --quiet "$1"); then
    return 0
  fi
  return 1
}

# Allow calling for methods from outside
for i in "$@"; do
  "$i"
done
